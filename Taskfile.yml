version: '3'

vars:
  APP_NAME: 'leszmonitor'
  BACKEND_DIR: '{{.TASKFILE_DIR}}/backend'
  BACKEND_SRC_DIR: '{{.BACKEND_DIR}}/src'
  BACKEND_BIN_DIR: '{{.BACKEND_DIR}}/bin'
  FRONTEND_DIR: '{{.TASKFILE_DIR}}/frontend'
  DB_DIR: '{{.TASKFILE_DIR}}/mongodb'

env:
  "LOG_FILE_PATH": '{{.BACKEND_DIR}}/.dev-logs/backend.log'
  "LOG_LEVEL": 'TRACE'

dotenv: ['./backend/.env', './frontend/.env']

tasks:
  backend:build:
    desc: Build the back-end binary
    dir: '{{.BACKEND_DIR}}'
    cmds:
      - echo "Building {{.APP_NAME}}..."
      - mkdir -p {{.BACKEND_BIN_DIR}}
      - cd src && go build -v -o "{{.BACKEND_BIN_DIR}}/{{.APP_NAME}}" main.go
      - echo "Build complete. Binary at {{.BACKEND_BIN_DIR}}/{{.APP_NAME}}."
    sources:
      - '**/*.go'
    generates:
      - '{{.BACKEND_BIN_DIR}}/{{.APP_NAME}}'

  backend:run:
    desc: Run the back-end binary
    deps: [backend:build, db:run]
    dir: '{{.BACKEND_DIR}}'
    cmds:
      - "{{.BACKEND_BIN_DIR}}/{{.APP_NAME}}"

  backend:dev:
    desc: Run the back-end dev server with air for live reload
    deps: [db:run]
    dir: '{{.BACKEND_SRC_DIR}}'
    cmds:
      - $GOPATH/bin/air -build.stop_on_error true

  backend:clean:
    desc: Clean the back-end build artifacts
    dir: '{{.BACKEND_DIR}}'
    cmds:
      - rm -r {{.BACKEND_BIN_DIR}}/{{.APP_NAME}} || true
    sources:
      - '{{.BACKEND_BIN_DIR}}/{{.APP_NAME}}'

  backend:test:
    desc: Run the back-end tests
    dir: '{{.BACKEND_SRC_DIR}}'
    cmds:
      - go test -v ./...
    generates:
      - '{{.BACKEND_BIN_DIR}}/{{.APP_NAME}}'

  backend:coverage:
    desc: Run the back-end tests with coverage
    dir: '{{.BACKEND_SRC_DIR}}'
    cmds:
      - go test -coverprofile=coverage.out -v ./...
    generates:
      - '{{.BACKEND_SRC_DIR}}/coverage.out'

  frontend:install:
    desc: Install front-end dependencies
    dir: '{{.FRONTEND_DIR}}'
    cmds:
      - npm ci
    sources:
      - 'package.json'
      - 'package-lock.json'
    generates:
      - 'node_modules/**/*'

  frontend:dev:
    desc: Run the front-end development server
    dir: '{{.FRONTEND_DIR}}'
    deps: [frontend:install]
    cmds:
      - npm run dev
    sources:
      - 'app/**/*'
      - 'public/**/*'
      - 'next.config.ts'

  frontend:build:
    desc: Build the front-end for production
    dir: '{{.FRONTEND_DIR}}'
    deps: [frontend:install]
    cmds:
      - npm run build
    sources:
      - 'app/**/*'
      - 'public/**/*'
      - 'next.config.ts'
      - 'package.json'
    generates:
      - '.next/**/*'

  frontend:start:
    desc: Start the front-end production server
    dir: '{{.FRONTEND_DIR}}'
    deps: [frontend:build]
    cmds:
      - npm run start

  frontend:lint:
    desc: Lint the front-end code
    dir: '{{.FRONTEND_DIR}}'
    deps: [frontend:install]
    cmds:
      - npm run lint
    sources:
      - 'app/**/*.{js,ts,jsx,tsx}'
      - '.eslintrc.json'

  frontend:clean:
    desc: Clean front-end build artifacts
    dir: '{{.FRONTEND_DIR}}'
    cmds:
      - rm -rf .next || true
      - rm -rf node_modules/.cache || true

  frontend:docker:build:
    desc: Build the front-end Docker image
    dir: '{{.FRONTEND_DIR}}'
    cmds:
      - docker build -t {{.APP_NAME}}-frontend:latest .
    sources:
      - 'app/**/*'
      - 'public/**/*'
      - 'Dockerfile'
      - 'next.config.ts'
      - 'package.json'

  frontend:docker:run:
    desc: Run the front-end Docker container
    deps: [frontend:docker:build]
    cmds:
      - docker run -p 3000:3000 --name {{.APP_NAME}}-frontend {{.APP_NAME}}-frontend:latest

  frontend:docker:stop:
    desc: Stop the front-end Docker container
    cmds:
      - docker stop {{.APP_NAME}}-frontend || true
      - docker rm {{.APP_NAME}}-frontend || true

  db:build:
    desc: Build the MongoDB Docker image
    dir: '{{.DB_DIR}}'
    cmds:
      - docker build -t {{.APP_NAME}}-mongodb:latest .

  db:run:
    desc: Run the MongoDB Docker container
    cmds:
      - docker ps -a | grep {{.APP_NAME}}-mongodb || task db:build
      - task: db:stop
      - docker run -d --name leszmonitor-mongodb --restart unless-stopped -v {{.APP_NAME}}_mongodb_data:/data/db -v {{.APP_NAME}}_mongodb_config:/data/configdb -p 27017:27017 leszmonitor-mongodb:latest
      - echo "MongoDB container started on port 27017"

  db:stop:
    desc: Stop the MongoDB Docker container
    cmds:
      - docker stop {{.APP_NAME}}-mongodb || true
      - docker rm {{.APP_NAME}}-mongodb || true

  # Combined tasks
  dev:
    desc: Run both frontend and backend in development mode
    cmds:
      - task: backend:dev
      - task: frontend:dev

  build:
    desc: Build both frontend and backend
    cmds:
      - task: backend:build
      - task: frontend:build

  docker:build:
    desc: Build Docker images for frontend and backend
    cmds:
      - task: backend:docker:build
      - task: frontend:docker:build

  clean:
    desc: Clean all build artifacts
    cmds:
      - task: frontend:clean
      - task: backend:clean

  logs:clean:
    desc: Remove logs
    cmds:
      - rm ${LOG_FILE_PATH} || true
      - rm ./.logs/* || true
    sources:
      - './.logs/*'
      - './backend/logs/*'
