version: '3'

vars:
  APP_NAME: 'leszmonitor'
  BACKEND_DIR: '{{.TASKFILE_DIR}}/backend'
  BACKEND_SRC_DIR: '{{.BACKEND_DIR}}/src'
  BACKEND_BIN_DIR: '{{.BACKEND_DIR}}/bin'
  FRONTEND_DIR: '{{.TASKFILE_DIR}}/frontend'

env:
  "LOG_LEVEL": 'TRACE'
  "ENV": 'DEV'
  "API_PORT": '7001'
  "LOG_FILE_PATH": '{{.BACKEND_DIR}}/logs/{{.APP_NAME}}.log'

tasks:
  backend:build:
    desc: Build the backend binary
    dir: '{{.BACKEND_DIR}}'
    cmds:
      - echo "Building {{.APP_NAME}}..."
      - mkdir -p {{.BACKEND_BIN_DIR}}
      - cd src && go build -v -o "{{.BACKEND_BIN_DIR}}/{{.APP_NAME}}" main.go
      - echo "Build complete. Binary at {{.BACKEND_BIN_DIR}}/{{.APP_NAME}}."
    sources:
      - '**/*.go'
    generates:
      - '{{.BACKEND_BIN_DIR}}/{{.APP_NAME}}'

  backend:run:
    desc: Run the backend binary
    deps: [backend:build]
    dir: '{{.BACKEND_DIR}}'
    cmds:
      - "{{.BACKEND_BIN_DIR}}/{{.APP_NAME}}"

  backend:dev:
    desc: Run the backend dev server with air
    dir: '{{.BACKEND_SRC_DIR}}'
    cmds:
      - air

  backend:run-prod:
    desc: Run the backend binary in production mode
    deps: [backend:build]
    dir: '{{.BACKEND_DIR}}'
    env:
      "ENV": 'PROD'
    cmds:
      - "{{.BACKEND_BIN_DIR}}/{{.APP_NAME}}"

  backend:clean:
    desc: Clean the backend build artifacts
    dir: '{{.BACKEND_DIR}}'
    cmds:
      - rm -r {{.BACKEND_BIN_DIR}}/{{.APP_NAME}} || true
    sources:
      - '{{.BACKEND_BIN_DIR}}/{{.APP_NAME}}'

  backend:test:
    desc: Run the backend tests
    dir: '{{.BACKEND_SRC_DIR}}'
    cmds:
      - go test -v .
    sources:
      - '**/*.go'
    generates:
      - '{{.BACKEND_BIN_DIR}}/{{.APP_NAME}}'

  frontend:install:
    desc: Install frontend dependencies
    dir: '{{.FRONTEND_DIR}}'
    cmds:
      - npm ci
    sources:
      - 'package.json'
      - 'package-lock.json'
    generates:
      - 'node_modules/**/*'

  frontend:dev:
    desc: Run the frontend development server
    dir: '{{.FRONTEND_DIR}}'
    deps: [frontend:install]
    cmds:
      - npm run dev
    sources:
      - 'app/**/*'
      - 'public/**/*'
      - 'next.config.ts'

  frontend:build:
    desc: Build the frontend for production
    dir: '{{.FRONTEND_DIR}}'
    deps: [frontend:install]
    cmds:
      - npm run build
    sources:
      - 'app/**/*'
      - 'public/**/*'
      - 'next.config.ts'
      - 'package.json'
    generates:
      - '.next/**/*'

  frontend:start:
    desc: Start the frontend production server
    dir: '{{.FRONTEND_DIR}}'
    deps: [frontend:build]
    cmds:
      - npm run start

  frontend:lint:
    desc: Lint the frontend code
    dir: '{{.FRONTEND_DIR}}'
    deps: [frontend:install]
    cmds:
      - npm run lint
    sources:
      - 'app/**/*.{js,ts,jsx,tsx}'
      - '.eslintrc.json'

  frontend:clean:
    desc: Clean frontend build artifacts
    dir: '{{.FRONTEND_DIR}}'
    cmds:
      - rm -rf .next || true
      - rm -rf node_modules/.cache || true

  frontend:docker:build:
    desc: Build the frontend Docker image
    dir: '{{.FRONTEND_DIR}}'
    cmds:
      - docker build -t {{.APP_NAME}}-frontend:latest .
    sources:
      - 'app/**/*'
      - 'public/**/*'
      - 'Dockerfile'
      - 'next.config.ts'
      - 'package.json'

  frontend:docker:run:
    desc: Run the frontend Docker container
    deps: [frontend:docker:build]
    cmds:
      - docker run -p 3000:3000 --name {{.APP_NAME}}-frontend {{.APP_NAME}}-frontend:latest

  frontend:docker:stop:
    desc: Stop the frontend Docker container
    cmds:
      - docker stop {{.APP_NAME}}-frontend || true
      - docker rm {{.APP_NAME}}-frontend || true

  # Combined tasks
  dev:
    desc: Run both frontend and backend in development mode
    cmds:
      - task: backend:dev
      - task: frontend:dev

  build:
    desc: Build both frontend and backend
    cmds:
      - task: backend:build
      - task: frontend:build

  docker:build:
    desc: Build Docker images for frontend and backend
    cmds:
      - task: frontend:docker:build
      # Add backend docker build when available

  clean:
    desc: Clean all build artifacts
    cmds:
      - task: frontend:clean
      - task: backend:clean

  logs:clean:
    desc: Remove logs
    dir: '{{.BACKEND_DIR}}'
    cmds:
      - rm ${LOG_FILE_PATH} || true
    sources:
      - 'logs/*'
